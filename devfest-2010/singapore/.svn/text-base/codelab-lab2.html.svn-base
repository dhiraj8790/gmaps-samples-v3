<!DOCTYPE html>
<html>
<head>
  <title>DevFest AU: Geo Code Labs</title>
</head>
<body>
<style>
body {
  font-family: arial;
}
h1 {
  text-shadow: #99b 3px 3px 4px;
  margin-top: 0;
}

#main {
  margin: 0 auto;
  text-align: center;
}

#map-canvas {
  margin: 0 auto;
  width: 750px;
  height: 500px;
  -webkit-box-shadow: rgba(0,0,0,0.7) 10px 10px 40px;
  -moz-box-shadow: rgba(0,0,0,0.7) 10px 10px 40px;
  box-shadow: rgba(0,0,0,0.7) 10px 10px 40px;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
  border: 6px solid #429;
}

.info-window {
  font-size: 0.9em;
  text-align: left;
}
.info-window h2 {
  color: #426;
  font-size: 1.2em;
  margin: 0 0 5px 0;
  text-align: left;
  text-shadow: #666 2px 2px 4px;
}
.info-window img {
  border: 3px solid #000;
  -webkit-border-radius: 2px;
  -moz-border-radius: 2px;
  border-radius: 2px;
}

.timestamp {
  color: #676767;
  font-size: 0.9em;
  font-style: italic;
  font-weight: bold;
  margin-top: 4px;
}
.caption {
  color: #333;
  font-size: 0.8em;
  overflow: none;
  width: 250px;
}

.photo-marker {
  -webkit-border-radius: 2px;
  -moz-border-radius: 2px;
  border-radius: 2px;
  border: 2px solid #eee;
  -webkit-box-shadow: rgba(0,0,0,0.7) 3px 3px 4px;
  -moz-box-shadow: rgba(0,0,0,0.7) 3px 3px 4px;
  box-shadow: rgba(0,0,0,0.7) 3px 3px 4px;
  cursor: pointer;
  position: absolute;
  z-index: 0;
}

.info-control {
  background: #faeeff;
  -webkit-border-radius: 4px;
  -moz-border-radius: 2px;
  border-radius: 4px;
  border: 3px solid #429;
  border-left: 0;
  font-size: 0.7em;
  height: 120px;
  margin: 15px 0 0 -5px;
	filter: alpha(opacity=80);
	-moz-opacity: 0.8;
	opacity: 0.8;
  padding: 4px 4px 2px 8px;
  text-align: left;
  width: 120px;
}
.info-control h3 {
  font-size: 1em;
  margin: 0 0 5px 0;
}
.info-control input {
  font-size: 1em;
  width: 110px;
}
</style>

<div id="main">
  <h1>Lab 2: Map Customization (OverlayView)</h1>
  <div id="map-canvas"></div>
</div>

<script type="text/javascript"
    src="http://maps.google.com/maps/api/js?sensor=false"></script>
<script type="text/javascript">
var App = {
  // Constants
  FLICKR_API_KEY: '1632c18a388a4da173db303dc5d20755',
  
  // Map related
  map: null,
  markers: {},
  infoControl: null,
  infoWindow: new google.maps.InfoWindow(),
  
  // DOM pointers
  mapCanvasNode: document.getElementById('map-canvas')
};

/**
 * Custom control to overlay a DIV containers over a map to display more info
 * and make available additional search controls.
 * @param {number} index Default control index
 */
App.InfoControl = function(index) {
  this.div = document.createElement('div');
  this.div.className = 'info-control';
  this.div.index = index;
  
  this.totalNode = document.createElement('span');
  this.totalNode.innerHTML = 0;
  this.countNode = document.createElement('span');
  this.countNode.innerHTML = 0;
  this.termsNode = document.createElement('input');
  this.tagsNode = document.createElement('input');
  
  this.init();
};
App.InfoControl.prototype.init = function() {
  var node = document.createElement('h3');
  this.div.appendChild(node);
  
  node.appendChild(document.createTextNode('Showing '));
  node.appendChild(this.countNode);
  node.appendChild(document.createTextNode(' of '));
  node.appendChild(this.totalNode);
  
  node = document.createElement('b');
  node.innerHTML = 'Search terms: ';
  this.div.appendChild(node);
  
  this.termsNode = node = document.createElement('input');
  node.type = 'text';
  node.value = '';
  this.div.appendChild(node);
  
  this.div.appendChild(document.createElement('br'));
  
  node = document.createElement('b');
  node.innerHTML = 'Tags: ';
  this.div.appendChild(node);
  
  this.tagsNode = node = document.createElement('input');
  node.type = 'text';
  node.value = 'art, coffee';
  this.div.appendChild(node);
  
  this.div.appendChild(document.createElement('br'));
  
  node = document.createElement('input');
  node.type = 'button';
  node.value = 'update';
  google.maps.event.addDomListener(node, 'click', App.getFlickrPhotos);
  this.div.appendChild(node);
};
App.InfoControl.prototype.getTerms = function() {
  return this.termsNode.value;
};
App.InfoControl.prototype.getTags = function() {
  return this.tagsNode.value;
};

/**
 * Custom marker overlay to display small Flickr thumbnails as markers in
 * addition to applying better CSS for added effect.
 * @param {Object} options Required properties are:
 *      {FlickrPhotoObject} photo
 *      {google.maps.LatLng} position
 *      {google.maps.Size} size
 *      {google.maps.Map} map
 */
App.PhotoMarker = function(options) {
  if (!options.photo || !options.position || !options.size || !options.map) {
    throw new Error('App.PhotoMarker: Missing required parameters');
  }
  
  this.div_ = null;
  this.photo_ = options.photo;
  this.isAdded_ = false;
  
  this.position = options.position;
  this.size = options.size;
  this.map = options.map;
  this.setMap(this.map);
};
App.PhotoMarker.prototype = new google.maps.OverlayView();

/**
 * Called when overlay is first attached to the map via setMap().
 */
App.PhotoMarker.prototype.onAdd = function() {
  var div = this.div_ = document.createElement('div');
  div.className = 'photo-marker';
  div.style.width = this.size.width + 'px';
  div.style.height = this.size.height + 'px';
  div.innerHTML = [
    '<img src="',
    App.getFlickrPhotoUrl(this.photo_, 's'),
    '" width=',
    this.size.width,
    ' height=',
    this.size.height,
    '/>'
  ].join('');
  this.getPanes().overlayLayer.appendChild(div);
  
  // Register listeners to bubble up z-index on mouseover.
  google.maps.event.addDomListener(div, 'mouseover', (function(node) {
    return function() {
      node.style.zIndex = 1;
    };
  })(div));
  google.maps.event.addDomListener(div, 'mouseout', (function(node) {
    return function() {
      node.style.zIndex = 0;
    };
  })(div));
  
  // Register listeners to open up an info window when clicked.
  google.maps.event.addDomListener(div, 'click', App.handleMarkerClick(this));
};

/**
 * Called whenever map needs to redraw the overlay onto map.
 */
App.PhotoMarker.prototype.draw = function() {
  var projection = this.getProjection();
  var coord = projection.fromLatLngToDivPixel(this.position);
  this.div_.style.left = (coord.x - Math.floor(this.size.width / 2)) + 'px';
  this.div_.style.top = coord.y + 'px';
};

/**
 * Called when removing this overlay from the map.
 */
App.PhotoMarker.prototype.onRemove = function() {
  this.div_.parentNode.removeChild(this.div_);
  this.div_ = null;
};

App.PhotoMarker.prototype.setVisible = function(visible) {
  this.div_.style.display = visible ? '' : 'none';
}

/**
 * Injects a new SCRIPT tag into HEAD to fetch JSONP resources.
 * @param {string} url
 */
App.loadScript = function(url) {
  var script = document.createElement('script');
  script.type = 'text/javascript';
  script.src = url;
  document.getElementsByTagName('head')[0].appendChild(script);
};

/**
 * URL escapes the specified string, for use with request parameter values.
 * @param {string} str
 */
App.escapeUrl = function(str) {
  return window.encodeURIComponent(str);
};

/**
 * Callback function to handle click events fired on each Marker.
 * @param {google.maps.Marker} marker
 * @return {function}
 */
App.handleMarkerClick = function(marker) {
  return function() {
    var photo = marker.photo_;
    var photoDate = (new Date(photo.datetaken)).toUTCString();
    photoDate = photoDate.substring(0, photoDate.lastIndexOf(' '));
    App.infoWindow.setContent([
      '<div class="info-window">',
      '<h2>' + photo.title + '</h2>',
      '<a target="_blank" ',
        'href="' + App.getFlickrPhotoUrl(marker.photo_, 'b') + '">',
      '<img src="',
      App.getFlickrPhotoUrl(marker.photo_, 'm'),
      '"/>',
      '</a>',
      '<div class="caption">',
      photo.description._content,
      '<div class="timestamp">',
      photoDate,
      '</div>',
      '</div>',
      '</div>'
    ].join(''));
    App.infoWindow.open(App.map, marker);
  };
};

/**
 * Generates the Flickr photo source URL for the specified size.
 * Reference: http://www.flickr.com/services/api/misc.urls.html
 * @param {Object} photo Photo JSON response object
 * @param {string} size One of the following: [m,s,t,b]
 */
App.getFlickrPhotoUrl = function(photo, size) {
  var url = [
    'http://farm',
    photo.farm,
    '.static.flickr.com/',
    photo.server,
    '/',
    photo.id,
    '_',
    photo.secret,
    '_',
    size,
    '.jpg'
  ].join('');
  return url;
};

/**
 * Processes the response from the Flickr photos search query.
 * @param {Object} response JSON response object
 */
App.getFlickrPhotosCallback = function(response) {
  // Iterate through each photo and plot on map.
  var photos = response.photos;
  for (var n = 0, photo; photo = photos.photo[n]; n++) {
    // Keep a cache of Marker objects to minimize creating new ones by using
    // the photo ID as the key.
    var marker = App.markers[photo.id];
    if (!marker) {
      // Plot location using a custom overlay marker
      marker = new App.PhotoMarker({
        photo: photo,
        size: new google.maps.Size(35, 35),
        position: new google.maps.LatLng(photo.latitude, photo.longitude),
        map: App.map
      });
      App.markers[photo.id] = marker;
      
      // Start prefetching photos to be displayed in the info window
      var img = new Image();
      img.src = App.getFlickrPhotoUrl(photo, 'm');
    }
    marker.isAdded_ = true;
  }
  
  // Hide any markers which are not flagged to be added.
  for (var id in App.markers) {
    var marker = App.markers[id];
    if (marker.isAdded_) {
      if (!marker.getMap()) {
        marker.setMap(App.map);
      }
      
      // Reset added flag
      marker.isAdded_ = false;
    } else {
      marker.setMap(null);
    }
  }
  
  // Update info control with information about this request.
  App.infoControl.countNode.innerHTML = photos.photo.length;
  App.infoControl.totalNode.innerHTML = photos.total;
};

/**
 * Sends off a Flickr photos search query.
 */
App.getFlickrPhotos = function() {
  // If no options are passed in, create a default set.
  var options = {
    tags: App.infoControl.getTags(),
    text: App.infoControl.getTerms()
  };
  
  // Flickr bbox param needs comma-delimited list of 4 values in format:
  // [sw.lng, sw.lat, ne.lng, ne.lat]
  var bounds = App.map.getBounds();
  var sw = bounds.getSouthWest();
  var ne = bounds.getNorthEast();
  var bbox = [
    sw.lng(),
    sw.lat(),
    ne.lng(),
    ne.lat()
  ].join(',');

  // Generate request URL to Flickr's photo search API
  var feedUrl = [
    'http://api.flickr.com/services/rest/?method=flickr.photos.search',
    'api_key=' + App.FLICKR_API_KEY,
    'format=json',
    'jsoncallback=App.getFlickrPhotosCallback',
    'accuracy=16',
    'has_geo=1',
    'per_page=50',
    'sort=date-posted-desc',
    'bbox=' + App.escapeUrl(bbox),
    'tags=' + App.escapeUrl(options.tags),
    'text=' + App.escapeUrl(options.text),
    'extras=geo,description,date_taken'
  ].join('&');
  
  // Send request
  App.loadScript(feedUrl);
};

App.getNightStyledMapType = function(mapName) {
  var mapStyles = [{
    featureType: 'all',
    elementType: 'all',
    stylers: [
      { invert_lightness: true },
      { visibility: 'on' },
      { saturation: 36 },
      { gamma: 0.83 },
      { hue: '#00eeff' }
    ]
  }, {
    featureType: 'water',
    elementType: 'all',
    stylers: [
      { invert_lightness: true },
      { visibility: 'simplified' },
      { hue: '#ff8800' }
    ]
  }];
  return new google.maps.StyledMapType(mapStyles, {
    name: mapName
  });
};

App.getCleanStyledMapType = function(mapName) {
  var mapStyles = [{
    featureType: "road",
    elementType: "all",
    stylers: [{
      visibility: "simplified"
    }]
  }, {
    featureType: "administrative.neighbourhood",
    elementType: "geometry",
    stylers: [{
      hue: "#ff1a00"
    }, {
      saturation: -31
    }]
  }, {
    featureType: "water",
    elementType: "geometry",
    stylers: [{
      hue: "#6e00ff"
    }, {
      saturation: 26
    }]
  }, {
    featureType: "road.highway",
    elementType: "labels",
    stylers: [{
      visibility: "off"
    }]
  }, {
    featureType: "landscape.natural",
    elementType: "geometry",
    stylers: [{
      hue: "#0008ff"
    }]
  }];
  return new google.maps.StyledMapType(mapStyles, {
    name: mapName
  });
};

/**
 * Called on the initial page load to initialize the map.
 */
App.init = function() {
  App.map = new google.maps.Map(App.mapCanvasNode, {
    zoom: 14,
    center:  new google.maps.LatLng(1.2988500019602678, 103.7877099999999),
    mapTypeId: 'clean',
    scaleControl: true,
    mapTypeControlOptions: {
      style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,
      position: google.maps.ControlPosition.TOP_LEFT,
      mapTypeIds: [
        'clean',
        'night',
        google.maps.MapTypeId.ROADMAP,
        google.maps.MapTypeId.HYBRID,
        google.maps.MapTypeId.SATELLITE,
        google.maps.MapTypeId.TERRAIN
      ]
    },
    navigationControlOptions: {
      style: google.maps.NavigationControlStyle.SMALL,
      position: google.maps.ControlPosition.TOP_RIGHT
    }
  });
  
  // Add custom styled map types.
  App.map.mapTypes.set('clean', App.getCleanStyledMapType('Clean'));
  App.map.mapTypes.set('night', App.getNightStyledMapType('Night'));
  
  // Add custom controls.
  App.infoControl = new App.InfoControl(0);
  App.map.controls[google.maps.ControlPosition.LEFT].push(App.infoControl.div);
  
  // Make the info window go away when clicking anywhere on the Map.
  google.maps.event.addListener(App.map, 'click', function() {
    App.infoWindow.close();
  });
  
  // Send new search for photos on initial load and any time Map bounds shifts.
  google.maps.event.addListener(App.map, 'idle', App.getFlickrPhotos);
};

// Call App.init when page loads.
google.maps.event.addDomListener(window, 'load', App.init);
</script>

</body>
</html>
